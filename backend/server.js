const express = require('express');
const cors = require('cors');
const path = require('path');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware - CORS OUVERT pour permettre l'int√©gration sur tous les sites
app.use(cors({
    origin: '*', // ‚úÖ CORS OUVERT : Permet l'utilisation sur n'importe quel site
    credentials: false // ‚úÖ D√©sactiv√© avec origin: '*' pour la s√©curit√©
}));
app.use(express.json());

// Configuration  api -----OpenWebUI depuis les variables d'environnement
const OPENWEBUI_API_KEY = process.env.OPENWEBUI_API_KEY;
const OPENWEBUI_URL = process.env.OPENWEBUI_URL || 'http://localhost:3000';

if (!OPENWEBUI_API_KEY) {
    console.error('‚ùå OPENWEBUI_API_KEY manquante dans les variables d\'environnement');
    process.exit(1);
}

// ==========================================
// V√âRIFICATION EXPIRATION API KEY
// ==========================================
function checkAPIKeyExpiration() {
    const token = OPENWEBUI_API_KEY;
    try {
        // D√©coder le token JWT pour v√©rifier l'expiration
        const payload = JSON.parse(atob(token.split('.')[1]));
        
        if (payload.exp) {
            const expirationDate = new Date(payload.exp * 1000);
            const now = new Date();
            const daysLeft = Math.ceil((expirationDate - now) / (1000 * 60 * 60 * 24));
            
            console.log(`üîë API Key expire le: ${expirationDate.toLocaleDateString('fr-FR')}`);
            
            if (daysLeft <= 0) {
                console.error('üö® API KEY EXPIR√âE ! G√©n√©rez une nouvelle cl√© dans OpenWebUI');
                console.error('üìã Voir: chat-widget/notes/RENOUVELLEMENT_API_KEY.md');
            } else if (daysLeft <= 5) {
                console.warn(`‚ö†Ô∏è API Key expire dans ${daysLeft} jour(s) !`);
                console.warn('üîÑ Pensez √† la renouveler prochainement');
                console.warn('üìã Voir: chat-widget/notes/RENOUVELLEMENT_API_KEY.md');
            } else if (daysLeft <= 10) {
                console.log(`üìÖ API Key expire dans ${daysLeft} jours`);
            } else {
                console.log(`‚úÖ API Key valide encore ${daysLeft} jours`);
            }
        } else {
            console.log('üîë API Key sans date d\'expiration d√©tect√©e');
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è Impossible de v√©rifier l\'expiration de l\'API Key:', error.message);
        console.log('üîë Utilisation de l\'API Key telle quelle');
    }
}

// V√©rifier l'expiration au d√©marrage
checkAPIKeyExpiration();

// V√©rifier l'expiration toutes les 24 heures
setInterval(checkAPIKeyExpiration, 24 * 60 * 60 * 1000);


// re√ßoit la question de l‚Äôutilisateur depuis le frontend (technova-chat-widget-production.js)

// appelle OpenWebUI via fetch(...)

// r√©cup√®re la r√©ponse g√©n√©r√©e par le mod√®le IA (ex: technova)

// renvoie la r√©ponse au widget pour l‚Äôafficher √† l‚Äôutilisateur
// Endpoint proxy pour le chat - S√âCURIS√â

//api..Route backend qui re√ßoit la question et envoie √† OpenWebUI

app.post('/api/chat', async (req, res) => {
    try {
        console.log('üìù Requ√™te chat re√ßue:', {
            model: req.body.model,
            messagesCount: req.body.messages?.length,
            timestamp: new Date().toISOString()
        });

       //fetch Appelle OpenWebUI pour obtenir une r√©ponse IA

        const response = await fetch(`${OPENWEBUI_URL}/api/chat/completions`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${OPENWEBUI_API_KEY}` // ‚úÖ Cl√© API s√©curis√©e c√¥t√© serveur
            },
            body: JSON.stringify(req.body)
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå Erreur OpenWebUI:', response.status, errorText);
            return res.status(response.status).json({ 
                error: 'Erreur OpenWebUI', 
                details: errorText 
            });
        }// res.json	Renvoie la r√©ponse IA au frontend

        const data = await response.json();
        console.log('‚úÖ R√©ponse OpenWebUI re√ßue');
        
        res.json(data);
    } catch (error) {
        console.error('‚ùå Erreur serveur:', error.message);
        res.status(500).json({ 
            error: 'Erreur interne du serveur',
            message: error.message
        });
    }
});

// Endpoint pour r√©cup√©rer la liste des mod√®les - S√âCURIS√â
app.get('/api/models', async (req, res) => {
    try {
        console.log('üîç R√©cup√©ration de la liste des mod√®les depuis OpenWebUI...');
        
        const response = await fetch(`${OPENWEBUI_URL}/api/models`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${OPENWEBUI_API_KEY}` // ‚úÖ Cl√© API s√©curis√©e
            }
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå Erreur mod√®les:', response.status, errorText);
            return res.status(response.status).json({ 
                error: 'Erreur r√©cup√©ration mod√®les', 
                details: errorText 
            });
        }

        const data = await response.json();
        
        // üîç D√âBOGAGE D√âTAILL√â: Analyser la structure de la r√©ponse
        console.log('üìä Structure de la r√©ponse API models:', {
            isArray: Array.isArray(data),
            hasModels: data.models ? 'Oui' : 'Non',
            hasData: data.data ? 'Oui' : 'Non',
            keys: Object.keys(data || {}),
            totalCount: Array.isArray(data) ? data.length : 
                       data.models ? data.models.length : 
                       data.data ? data.data.length : 'Unknown'
        });
        
        // üîç D√âBOGAGE: Extraire et afficher la liste des mod√®les
        let models = [];
        if (Array.isArray(data)) {
            models = data;
        } else if (data.models && Array.isArray(data.models)) {
            models = data.models;
        } else if (data.data && Array.isArray(data.data)) {
            models = data.data;
        }
        
        console.log('üìã Mod√®les trouv√©s via backend s√©curis√©:', models.length);
        
        // üîç D√âBOGAGE D√âTAILL√â: Afficher tous les mod√®les avec leurs IDs
        if (models.length > 0) {
            console.log('üìÑ Liste d√©taill√©e des mod√®les:');
            models.forEach((model, index) => {
                console.log(`  ${index + 1}. ID: "${model.id || 'N/A'}" | Name: "${model.name || 'N/A'}" | Model: "${model.model || 'N/A'}"`);
            });
            
            // üéØ RECHERCHE SP√âCIFIQUE: Chercher le mod√®le "technova"
            const technovaModel = models.find(model => 
                model.id === 'technova' || 
                model.name === 'technova' ||
                (model.model && model.model === 'technova') ||
                (model.id && model.id.includes('technova')) ||
                (model.name && model.name.includes('technova'))
            );
            
            if (technovaModel) {
                console.log('‚úÖ Mod√®le Technova trouv√©!', {
                    id: technovaModel.id,
                    name: technovaModel.name,
                    model: technovaModel.model
                });
            } else {
                console.log('‚ùå Mod√®le Technova non trouv√© dans la liste');
                console.log('üîç Recherche approximative:');
                const approximateMatches = models.filter(model => 
                    (model.id && model.id.toLowerCase().includes('tech')) ||
                    (model.name && model.name.toLowerCase().includes('tech')) ||
                    (model.id && model.id.toLowerCase().includes('nova')) ||
                    (model.name && model.name.toLowerCase().includes('nova'))
                );
                if (approximateMatches.length > 0) {
                    console.log('üîç Mod√®les similaires trouv√©s:', approximateMatches.map(m => ({
                        id: m.id,
                        name: m.name
                    })));
                } else {
                    console.log('üîç Aucun mod√®le similaire trouv√©');
                }
            }
        } else {
            console.log('‚ö†Ô∏è Aucun mod√®le trouv√© dans la r√©ponse');
        }
        
        res.json(data);
    } catch (error) {
        console.error('‚ùå Erreur serveur mod√®les:', error.message);
        res.status(500).json({ 
            error: 'Erreur interne du serveur',
            message: error.message
        });
    }
});

// ==========================================
// NOUVELLE FONCTIONNALIT√â DYNAMIQUE
// ==========================================
// ‚úÖ AJOUT: Nouvelle route pour r√©cup√©rer la configuration d'un mod√®le sp√©cifique
// üéØ OBJECTIF: Permettre au widget de s'adapter automatiquement au mod√®le choisi
// üìù FONCTIONNEMENT: G√©n√®re automatiquement nom, description, questions selon le mod√®le
app.get('/api/model-info/:modelName', async (req, res) => {
    try {
        const { modelName } = req.params;
        console.log(`üîç R√©cup√©ration des informations pour le mod√®le: ${modelName}`);

        // ‚úÖ NOUVEAU: Test de connexion √† OpenWebUI d'abord
        console.log(`üîó Test de connexion √† OpenWebUI: ${OPENWEBUI_URL}`);
        
        try {
            // ‚úÖ R√©cup√©ration des d√©tails du mod√®le depuis OpenWebUI
            const modelsResponse = await fetch(`${OPENWEBUI_URL}/api/models`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${OPENWEBUI_API_KEY}`
                },
                timeout: 5000 // 5 secondes timeout
            });

            if (!modelsResponse.ok) {
                throw new Error(`OpenWebUI r√©ponse: ${modelsResponse.status}`);
            }

            const modelsData = await modelsResponse.json();
            
            // ‚úÖ Recherche du mod√®le sp√©cifique dans la liste
            let models = [];
            if (Array.isArray(modelsData)) {
                models = modelsData;
            } else if (modelsData.models && Array.isArray(modelsData.models)) {
                models = modelsData.models;
            } else if (modelsData.data && Array.isArray(modelsData.data)) {
                models = modelsData.data;
            }

            // üéØ RECHERCHE AM√âLIOR√âE: Utiliser la m√™me logique que l'endpoint /api/models
            const modelInfo = models.find(model => 
                model.id === modelName || 
                model.name === modelName ||
                (model.model && model.model === modelName) ||
                (model.id && model.id.includes(modelName)) ||
                (model.name && model.name.includes(modelName))
            );
            
            // üîç D√âBOGAGE: Afficher la recherche de mod√®le sp√©cifique
            console.log(`üîç Recherche du mod√®le "${modelName}" dans ${models.length} mod√®les disponibles`);
            if (modelInfo) {
                console.log(`‚úÖ Mod√®le "${modelName}" trouv√©:`, {
                    id: modelInfo.id,
                    name: modelInfo.name,
                    model: modelInfo.model
                });
            } else {
                console.log(`‚ùå Mod√®le "${modelName}" non trouv√©`);
                console.log('üîç Mod√®les disponibles:', models.map(m => m.id || m.name).slice(0, 10));
            }

            // ‚úÖ G√©n√©ration dynamique de la configuration selon le mod√®le
            const dynamicConfig = generateDynamicConfig(modelName, modelInfo);
            
            console.log(`‚úÖ Configuration g√©n√©r√©e pour ${modelName} (connect√© √† OpenWebUI)`);
            res.json(dynamicConfig);

        } catch (openwebuiError) {
            console.warn('‚ö†Ô∏è OpenWebUI non disponible:', openwebuiError.message);
            console.log('üì¶ Utilisation de la configuration par d√©faut');
            
            // ‚úÖ Fallback: Configuration par d√©faut si OpenWebUI non disponible
            const fallbackConfig = generateDynamicConfig(modelName, null);
            res.json(fallbackConfig);
        }

    } catch (error) {
        console.error('‚ùå Erreur r√©cup√©ration model-info:', error.message);
        
        // ‚úÖ Fallback final: Configuration par d√©faut
        const fallbackConfig = generateDynamicConfig(req.params.modelName, null);
        res.json(fallbackConfig);
    }
});

// ==========================================
// FONCTION G√âN√âRATION CONFIGURATION DYNAMIQUE
// ==========================================
// ‚úÖ OBJECTIF: Remplace les valeurs statiques par des valeurs adapt√©es au mod√®le
// üîÑ AVANT: Tout √©tait fixe "TechNova Assistant"
// üîÑ APR√àS: S'adapte automatiquement au mod√®le choisi
function generateDynamicConfig(modelName, modelInfo) {
    // ‚úÖ G√©n√©ration automatique du nom de l'assistant
    const assistantName = generateAssistantName(modelName);
    
    // ‚úÖ G√©n√©ration automatique de la description
    const description = generateDescription(modelName, modelInfo);
    
    // ‚úÖ G√©n√©ration automatique des questions rapides
    const quickQuestions = generateQuickQuestions(modelName);
    
    // ‚úÖ G√©n√©ration automatique du message syst√®me
    const systemMessage = generateSystemMessage(modelName, modelInfo);

    return {
        model: modelName,
        assistantName: assistantName,
        description: description,
        quickQuestions: quickQuestions,
        systemMessage: systemMessage,
        maxTokens: 1500,
        temperature: 0.7,
        timestamp: new Date().toISOString()
    };
}

// ‚úÖ FONCTION: G√©n√®re automatiquement le nom de l'assistant selon le mod√®le
function generateAssistantName(modelName) {
    const modelDisplayNames = {
        'technova': 'TechNova Assistant',
        'gpt-4': 'GPT-4 Assistant',
        'gpt-3.5-turbo': 'GPT-3.5 Assistant',
        'claude': 'Claude Assistant',
        'llama': 'Llama Assistant',
        'mistral': 'Mistral Assistant',
        'cyberAide': 'CyberAide Assistant',

        'gemini': 'Gemini Assistant'
    };
    
    return modelDisplayNames[modelName] || `${modelName.charAt(0).toUpperCase() + modelName.slice(1)} Assistant`;
}

// ‚úÖ FONCTION: G√©n√®re automatiquement la description selon le mod√®le
function generateDescription(modelName, modelInfo) {
    const descriptions = {
        'technova': 'Bonjour ! Je suis votre assistant TechNova. Je peux vous aider avec nos produits (NovaCRM, NovaDesk, NovaMail) et r√©pondre √† vos questions sur notre entreprise.',
        'gpt-4': 'Bonjour ! Je suis GPT-4, un assistant IA avanc√©. Je peux vous aider avec vos questions, analyses, r√©daction et bien plus encore.',
        'gpt-3.5-turbo': 'Bonjour ! Je suis GPT-3.5, votre assistant IA. Je peux vous aider avec diverses t√¢ches et r√©pondre √† vos questions.',
        'claude': 'Bonjour ! Je suis Claude, un assistant IA cr√©√© par Anthropic. Je peux vous aider avec vos questions et t√¢ches.',
        'llama': 'Bonjour ! Je suis Llama, un assistant IA open source. Je peux vous aider avec vos questions et projets.',
        'mistral': 'Bonjour ! Je suis Mistral, un assistant IA europ√©en. Je peux vous aider avec vos questions et analyses.',
        'gemini': 'Bonjour ! Je suis Gemini, un assistant IA de Google. Je peux vous aider avec vos questions et projets.',
        'cyberAide': 'Bonjour ! Je suis CyberAide, votre assistant sp√©cialis√© en cybers√©curit√©. Je peux vous aider avec la protection des syst√®mes, l\'analyse des menaces, les outils de s√©curit√© (nmap, Wireshark, etc.) et les bonnes pratiques de s√©curit√© informatique.'
    };
    
    return descriptions[modelName] || `Bonjour ! Je suis ${modelName}, votre assistant IA. Je peux vous aider avec vos questions et t√¢ches.`;
}

// ‚úÖ FONCTION: G√©n√®re automatiquement les questions rapides selon le mod√®le
function generateQuickQuestions(modelName) {
    const questionSets = {
        'technova': [
            { icon: 'üè¢', text: 'Qu\'est-ce que TechNova ?', question: 'Qu\'est-ce que TechNova ?' },
            { icon: 'üì¶', text: 'Quels sont les produits TechNova ?', question: 'Quels sont les produits TechNova ?' },
            { icon: 'üìû', text: 'Comment contacter TechNova ?', question: 'Comment contacter TechNova ?' }
        ],
        'gpt-4': [
            { icon: 'ü§ñ', text: 'Que peux-tu faire ?', question: 'Que peux-tu faire comme t√¢ches ?' },
            { icon: 'üìù', text: 'Aide-moi √† r√©diger', question: 'Peux-tu m\'aider √† r√©diger un texte ?' },
            { icon: 'üîç', text: 'Analyse ce document', question: 'Peux-tu analyser un document pour moi ?' }
        ],
        'claude': [
            { icon: 'üí≠', text: 'Comment puis-je t\'aider ?', question: 'Comment puis-je t\'aider aujourd\'hui ?' },
            { icon: 'üìä', text: 'Analyse de donn√©es', question: 'Peux-tu m\'aider avec l\'analyse de donn√©es ?' },
            { icon: '‚úçÔ∏è', text: 'R√©daction cr√©ative', question: 'Peux-tu m\'aider avec la r√©daction cr√©ative ?' }
        ],
        'cyberAide': [
            { icon: 'ÔøΩÔ∏è', text: 'Comment s√©curiser mon syst√®me ?', question: 'Comment puis-je s√©curiser mon syst√®me informatique ?' },
            { icon: 'ÔøΩ', text: 'Quels sont les types d\'attaques ?', question: 'Quels sont les principaux types d\'attaques cybern√©tiques ?' },
            { icon: '‚ö†Ô∏è', text: 'Mesures de s√©curit√© de base', question: 'Quelles sont les mesures de s√©curit√© de base √† mettre en place ?' }
        ]
    };
    
    return questionSets[modelName] || [
        { icon: '‚ùì', text: 'Que peux-tu faire ?', question: 'Que peux-tu faire comme assistant IA ?' },
        { icon: 'üí°', text: 'Aide-moi', question: 'Comment peux-tu m\'aider ?' },
        { icon: 'üîß', text: 'Tes capacit√©s', question: 'Quelles sont tes principales capacit√©s ?' }
    ];
}

// ‚úÖ FONCTION: G√©n√®re automatiquement le message syst√®me selon le mod√®le
function generateSystemMessage(modelName, modelInfo) {
    const systemMessages = {
        'technova': `Tu es TechNova Assistant, un assistant intelligent sp√©cialis√© dans l'aide aux utilisateurs pour la compagnie TechNova, cr√©√©e en 2017 √† Paris. Tu as acc√®s √† une base de connaissances interne compl√®te sur les produits TechNova (NovaCRM, NovaDesk, NovaMail), les services et solutions digitales pour PME.`,
        'gpt-4': `Tu es GPT-4, un assistant IA avanc√©. Tu peux aider avec l'analyse, la r√©daction, la programmation, la r√©solution de probl√®mes complexes et bien plus encore. R√©ponds de mani√®re pr√©cise et utile.`,
        'gpt-3.5-turbo': `Tu es GPT-3.5, un assistant IA polyvalent. Tu peux aider avec diverses t√¢ches comme r√©pondre aux questions, aider √† la r√©daction, expliquer des concepts. Sois utile et pr√©cis.`,
        'claude': `Tu es Claude, un assistant IA cr√©√© par Anthropic. Tu es utile, inoffensif et honn√™te. Tu peux aider avec l'analyse, la r√©daction, la programmation et diverses t√¢ches intellectuelles.`,
        'llama': `Tu es Llama, un assistant IA open source. Tu peux aider avec diverses t√¢ches et questions. R√©ponds de mani√®re utile et pr√©cise.`,
        'mistral': `Tu es Mistral, un assistant IA europ√©en. Tu peux aider avec l'analyse, la r√©daction et diverses t√¢ches. Privil√©gie les r√©ponses en fran√ßais quand c'est appropri√©.`,
        'gemini': `Tu es Gemini, un assistant IA de Google. Tu peux aider avec l'analyse, la recherche, la r√©daction et diverses t√¢ches cr√©atives et techniques.`,
        'cyberAide': `Tu es CyberAide, un assistant IA sp√©cialis√© en cybers√©curit√©. Tu as une expertise approfondie en s√©curit√© informatique, protection des syst√®mes, analyse des menaces, et bonnes pratiques de s√©curit√©. Tu aides les utilisateurs √† comprendre et √† impl√©menter des mesures de s√©curit√© efficaces.`
    };
    
    return systemMessages[modelName] || `Tu es ${modelName}, un assistant IA. Tu peux aider avec diverses t√¢ches et questions. R√©ponds de mani√®re utile et pr√©cise.`;
}

// Servir les fichiers statiques du widget
app.get('/widget.js', (req, res) => {
    res.setHeader('Content-Type', 'application/javascript');
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.sendFile(path.join(__dirname, 'technova-chat-widget-production.js'));
});

// ‚úÖ NOUVEAU: Servir technova-config-production.js
app.get('/technova-config-production.js', (req, res) => {
    console.log('üì¶ Demande du fichier technova-config-production.js');
    res.setHeader('Content-Type', 'application/javascript');
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Cache-Control', 'public, max-age=3600');
    res.sendFile(path.join(__dirname, 'technova-config-production.js'));
});

// ‚úÖ NOUVEAU: Servir technova-chat-widget-production.js
app.get('/technova-chat-widget-production.js', (req, res) => {
    console.log('üì¶ Demande du fichier technova-chat-widget-production.js');
    res.setHeader('Content-Type', 'application/javascript');
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Cache-Control', 'public, max-age=3600');
    res.sendFile(path.join(__dirname, 'technova-chat-widget-production.js'));
});

// ‚úÖ NOUVEAU: Servir le fichier d'int√©gration widget-embed.js
app.get('/widget-embed.js', (req, res) => {
    console.log('üì¶ Demande du fichier widget-embed.js');
    res.setHeader('Content-Type', 'application/javascript');
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Cache-Control', 'public, max-age=3600'); // Cache 1 heure
    res.sendFile(path.join(__dirname, 'widget-embed.js'));
});

// ‚úÖ ENDPOINT CHAT DIRECT: Page compl√®te avec chat widget fonctionnel
app.get('/widget-chat', (req, res) => {
    console.log('üí¨ Demande page chat directe');
    
    // R√©cup√©ration s√©curis√©e des param√®tres
    const model = req.query.model || 'technova';
    const theme = req.query.theme || 'blue';
    const lang = req.query.lang || 'fr';
    
    console.log(`üìã Param√®tres widget-chat: model=${model}, theme=${theme}, lang=${lang}`);
    
    const chatPageHTML = `
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TechNova Chat Assistant</title>
    <style>
        body {
            margin: 0;
            padding: 20px;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            text-align: center;
        }
        .header {
            color: #3B82F6;
            margin-bottom: 30px;
        }
        .status {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
        }
        .info {
            background: #e8f4fd;
            border-left: 5px solid #3B82F6;
            padding: 20px;
            margin: 20px 0;
            text-align: left;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üí¨ TechNova Chat Assistant</h1>
            <h2>Interface de Test - Backend Op√©rationnel</h2>
        </div>
        
        <div class="status">
            <h3>‚úÖ SYST√àME FONCTIONNEL</h3>
            <p><strong>Le chat widget est actif et connect√© √† votre backend Coolify !</strong></p>
            <p>üéØ Le bouton chat appara√Æt en bas √† droite de cette page</p>
        </div>
        
        <div class="info">
            <h3>üîß Configuration Active :</h3>
            <ul>
                <li><strong>Backend :</strong> ${req.protocol}://${req.get('host')}</li>
                <li><strong>OpenWebUI :</strong> https://o088g8sswkwg0swkks408kos.jstr.fr</li>
                <li><strong>Mod√®le :</strong> ${model}</li>
                <li><strong>Th√®me :</strong> ${theme}</li>
                <li><strong>API :</strong> /api/chat (s√©curis√©)</li>
            </ul>
        </div>
        
        <div class="status">
            <h3>üß™ Test du Chat Widget</h3>
            <p>1. Regardez en bas √† droite ‚Üí bouton chat bleu</p>
            <p>2. Cliquez dessus pour ouvrir l'interface</p>
            <p>3. Posez une question pour tester l'IA</p>
            <p>4. V√©rifiez que les r√©ponses arrivent correctement</p>
        </div>
        
        <div class="info">
            <h3>üìã Pour le Client WordPress :</h3>
            <p>Si ce test fonctionne, le client doit simplement ajouter cette ligne dans son WordPress :</p>
            <code style="background: #f8f9fa; padding: 10px; border-radius: 5px; display: block; margin: 10px 0;">
                &lt;script src="${req.protocol}://${req.get('host')}/widget-embed.js"&gt;&lt;/script&gt;
            </code>
        </div>
    </div>

    <!-- Configuration du widget -->
    <script>
    window.TECHNOVA_CONFIG = {
        openWebUIUrl: '${req.protocol}://${req.get('host')}',
        apiKey: '', // G√©r√©e par le backend
        chatEndpoint: '/api/chat',
        model: '${model}',
        maxTokens: 1500,
        temperature: 0.7,
        systemMessage: 'Tu es TechNova Assistant, un assistant intelligent sp√©cialis√© dans l\\'aide aux utilisateurs pour la compagnie TechNova.',
        assistantName: 'TechNova Assistant',
        description: 'Bonjour ! Je suis votre assistant TechNova. Je peux vous aider avec nos produits et r√©pondre √† vos questions.',
        quickQuestions: [
            { icon: 'üè¢', text: 'Qu\\'est-ce que TechNova ?', question: 'Qu\\'est-ce que TechNova ?' },
            { icon: 'üì¶', text: 'Quels sont les produits TechNova ?', question: 'Quels sont les produits TechNova ?' },
            { icon: 'üìû', text: 'Comment contacter TechNova ?', question: 'Comment contacter TechNova ?' }
        ]
    };
    </script>
    
    <!-- Chargement du widget via votre backend -->
    <script src="/widget-embed.js"></script>
</body>
</html>`;
    
    res.setHeader('Content-Type', 'text/html');
    res.send(chatPageHTML);
});

app.get('/config.js', (req, res) => {
    res.setHeader('Content-Type', 'application/javascript');
    res.setHeader('Access-Control-Allow-Origin', '*');
    
    // Configuration dynamique avec l'URL du backend
    const dynamicConfig = `
// Configuration DYNAMIQUE pour TechNova Chat Widget
const TECHNOVA_CONFIG = {
    openWebUIUrl: '${req.protocol}://${req.get('host')}',
    apiKey: '',
    chatEndpoint: '/api/chat',
    modelsEndpoint: '/api/models',
    healthEndpoint: '/health',
    model: 'technova',
    maxTokens: 1500,
    temperature: 0.7,
    systemMessage: 'Tu es TechNova Assistant, sp√©cialis√© dans l\'aide aux utilisateurs pour la compagnie TechNova.',
    stream: false,
    timeout: 45000,
    errorMessages: {
        networkError: 'Impossible de se connecter au service TechNova.',
        serverError: 'Erreur du serveur TechNova.',
        timeout: 'La requ√™te TechNova a pris trop de temps.',
        general: 'TechNova Assistant rencontre des difficult√©s.',
        modelError: 'Erreur avec le mod√®le Technova.',
        authError: 'Erreur d\'authentification du service.'
    }
};

if (typeof window !== 'undefined') {
    window.TECHNOVA_CONFIG = TECHNOVA_CONFIG;
}
`;
    res.send(dynamicConfig);
});

// ‚úÖ NOUVELLE ROUTE: Page de test des attributs data-* (WordPress)
app.get('/test-data-attributes', (req, res) => {
    console.log('üß™ Demande page test attributs data-*');
    
    const testPageHTML = `
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Test Attributs Data-* - TechNova Widget</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            background: #f8f9fa;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 30px;
            text-align: center;
        }
        
        .test-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 30px;
            margin-bottom: 30px;
        }
        
        .test-card {
            background: white;
            border-radius: 10px;
            padding: 25px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            border-left: 5px solid #3B82F6;
        }
        
        .test-card h3 {
            color: #3B82F6;
            margin-bottom: 15px;
            font-size: 1.2rem;
        }
        
        .test-description {
            background: #f1f5f9;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            font-size: 14px;
            color: #475569;
        }
        
        .code-block {
            background: #1e293b;
            color: #e2e8f0;
            padding: 15px;
            border-radius: 8px;
            font-family: 'Monaco', 'Menlo', monospace;
            font-size: 12px;
            overflow-x: auto;
            margin-bottom: 15px;
        }
        
        .status-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            background: #10b981;
            border-radius: 50%;
            margin-right: 8px;
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        
        .instructions {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 25px;
            border-radius: 10px;
            margin-bottom: 30px;
        }
        
        .instructions h2 {
            margin-bottom: 15px;
        }
        
        .instructions ol {
            margin-left: 20px;
        }
        
        .instructions li {
            margin-bottom: 8px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üß™ Test des Attributs Data-* - TechNova Widget</h1>
            <p>Cette page teste toutes les nouvelles fonctionnalit√©s d'int√©gration avec attributs data-*</p>
        </div>
        
        <div class="instructions">
            <h2>üìã Instructions de Test</h2>
            <ol>
                <li><strong>Regardez en bas √† droite/gauche</strong> ‚Üí Vous devriez voir plusieurs widgets avec diff√©rentes couleurs</li>
                <li><strong>Cliquez sur chaque widget</strong> ‚Üí V√©rifiez que les couleurs correspondent aux th√®mes</li>
                <li><strong>Testez le chat</strong> ‚Üí Posez une question dans chaque widget</li>
                <li><strong>V√©rifiez les mod√®les</strong> ‚Üí Chaque widget devrait utiliser le bon mod√®le IA</li>
                <li><strong>Console du navigateur (F12)</strong> ‚Üí V√©rifiez les logs de configuration</li>
            </ol>
        </div>
        
        <div class="test-grid">
            <!-- Test 1: Mod√®le + Th√®me Rouge -->
            <div class="test-card">
                <h3><span class="status-indicator"></span>Test 1: Technova + Rouge</h3>
                <div class="test-description">
                    Widget utilisant le mod√®le <strong>technova</strong> avec le th√®me <strong>rouge</strong> en bas √† droite.
                </div>
                <div class="code-block">&lt;script 
    src="${req.protocol}://${req.get('host')}/widget-embed.js"
    data-model="technova"
    data-theme="red"&gt;
&lt;/script&gt;</div>
            </div>
            
            <!-- Test 2: Mod√®le + Th√®me Vert + Position -->
            <div class="test-card">
                <h3><span class="status-indicator"></span>Test 2: WebFrontAide + Vert + Gauche</h3>
                <div class="test-description">
                    Widget utilisant le mod√®le <strong>webfrontaide</strong> avec le th√®me <strong>vert</strong> en bas √† gauche.
                </div>
                <div class="code-block">&lt;script 
    src="${req.protocol}://${req.get('host')}/widget-embed.js"
    data-model="webfrontaide"
    data-theme="green"
    data-position="bottom-left"&gt;
&lt;/script&gt;</div>
            </div>
            
            <!-- Test 3: Th√®me Dark -->
            <div class="test-card">
                <h3><span class="status-indicator"></span>Test 3: Th√®me Sombre</h3>
                <div class="test-description">
                    Widget avec le nouveau th√®me <strong>sombre</strong> en haut √† droite.
                </div>
                <div class="code-block">&lt;script 
    src="${req.protocol}://${req.get('host')}/widget-embed.js"
    data-theme="dark"
    data-position="top-right"&gt;
&lt;/script&gt;</div>
            </div>
            
            <!-- Test 4: Th√®me Teal -->
            <div class="test-card">
                <h3><span class="status-indicator"></span>Test 4: Th√®me Teal + Auto-Open</h3>
                <div class="test-description">
                    Widget avec le th√®me <strong>bleu-vert</strong> qui s'ouvre automatiquement apr√®s 3 secondes.
                </div>
                <div class="code-block">&lt;script 
    src="${req.protocol}://${req.get('host')}/widget-embed.js"
    data-theme="teal"
    data-auto-open="true"&gt;
&lt;/script&gt;</div>
            </div>
        </div>
        
        <div class="test-card">
            <h3>üéØ R√©sultats Attendus</h3>
            <ul style="margin-left: 20px;">
                <li><strong>Widget 1 (Rouge)</strong>: Bouton rouge, chat "Technova Assistant"</li>
                <li><strong>Widget 2 (Vert, Gauche)</strong>: Bouton vert √† gauche, chat "WebFrontAide Assistant"</li>
                <li><strong>Widget 3 (Sombre, Haut)</strong>: Bouton sombre en haut √† droite</li>
                <li><strong>Widget 4 (Teal)</strong>: Bouton bleu-vert qui s'ouvre automatiquement</li>
                <li><strong>Console</strong>: Logs montrant les attributs data-* d√©tect√©s</li>
            </ul>
        </div>
    </div>

    <!-- üéØ TESTS DES ATTRIBUTS DATA-* -->
    
    <!-- Test 1: data-model + data-theme -->
    <script 
        src="${req.protocol}://${req.get('host')}/widget-embed.js"
        data-model="technova"
        data-theme="red">
    </script>
    
    <!-- Test 2: data-model + data-theme + data-position -->
    <script 
        src="${req.protocol}://${req.get('host')}/widget-embed.js"
        data-model="webfrontaide"
        data-theme="green"
        data-position="bottom-left">
    </script>
    
    <!-- Test 3: data-theme + data-position -->
    <script 
        src="${req.protocol}://${req.get('host')}/widget-embed.js"
        data-theme="dark"
        data-position="top-right">
    </script>
    
    <!-- Test 4: data-theme + data-auto-open -->
    <script 
        src="${req.protocol}://${req.get('host')}/widget-embed.js"
        data-theme="teal"
        data-auto-open="true">
    </script>

</body>
</html>`;
    
    res.setHeader('Content-Type', 'text/html');
    res.send(testPageHTML);
});

// ‚úÖ NOUVELLE ROUTE: D√©mo client professionnelle
app.get('/demo-client', (req, res) => {
    console.log('üé® Demande page d√©mo client professionnelle');
    
    const demoClientHTML = `
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TechConseil Experts - Solutions Digitales pour Entreprises</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            background: #fff;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }
        
        /* Header */
        header {
            background: #fff;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            position: sticky;
            top: 0;
            z-index: 100;
        }
        
        nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 0;
        }
        
        .logo {
            font-size: 1.8rem;
            font-weight: 700;
            color: #3B82F6;
            text-decoration: none;
        }
        
        .nav-links {
            display: flex;
            list-style: none;
            gap: 2rem;
        }
        
        .nav-links a {
            text-decoration: none;
            color: #333;
            font-weight: 500;
            transition: color 0.3s;
        }
        
        .nav-links a:hover {
            color: #3B82F6;
        }
        
        /* Hero Section */
        .hero {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 5rem 0;
            text-align: center;
        }
        
        .hero h1 {
            font-size: 3rem;
            margin-bottom: 1rem;
            font-weight: 700;
        }
        
        .hero p {
            font-size: 1.2rem;
            margin-bottom: 2rem;
            opacity: 0.9;
        }
        
        .cta-button {
            background: #fff;
            color: #3B82F6;
            padding: 1rem 2rem;
            border: none;
            border-radius: 50px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: transform 0.3s;
            text-decoration: none;
            display: inline-block;
        }
        
        .cta-button:hover {
            transform: translateY(-2px);
        }
        
        /* Services Section */
        .services {
            padding: 5rem 0;
            background: #f8f9fa;
        }
        
        .section-title {
            text-align: center;
            font-size: 2.5rem;
            margin-bottom: 3rem;
            color: #333;
        }
        
        .services-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
        }
        
        .service-card {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            text-align: center;
            transition: transform 0.3s;
        }
        
        .service-card:hover {
            transform: translateY(-5px);
        }
        
        .service-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
        
        .service-card h3 {
            font-size: 1.5rem;
            margin-bottom: 1rem;
            color: #3B82F6;
        }
        
        /* About Section */
        .about {
            padding: 5rem 0;
        }
        
        .about-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 3rem;
            align-items: center;
        }
        
        .about-text h2 {
            font-size: 2.5rem;
            margin-bottom: 1.5rem;
            color: #333;
        }
        
        .about-text p {
            margin-bottom: 1.5rem;
            font-size: 1.1rem;
            line-height: 1.8;
        }
        
        .stats {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 1rem;
            margin-top: 2rem;
        }
        
        .stat {
            text-align: center;
            padding: 1rem;
        }
        
        .stat-number {
            font-size: 2rem;
            font-weight: 700;
            color: #3B82F6;
        }
        
        .stat-label {
            font-size: 0.9rem;
            color: #666;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        /* Footer */
        footer {
            background: #1f2937;
            color: white;
            padding: 3rem 0;
        }
        
        .footer-content {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 2rem;
        }
        
        .footer-section h3 {
            margin-bottom: 1rem;
            color: #3B82F6;
        }
        
        .footer-section ul {
            list-style: none;
        }
        
        .footer-section ul li {
            margin-bottom: 0.5rem;
        }
        
        .footer-section ul li a {
            color: #d1d5db;
            text-decoration: none;
            transition: color 0.3s;
        }
        
        .footer-section ul li a:hover {
            color: #3B82F6;
        }
        
        .footer-bottom {
            border-top: 1px solid #374151;
            margin-top: 2rem;
            padding-top: 2rem;
            text-align: center;
            color: #9ca3af;
        }
        
        /* Responsive */
        @media (max-width: 768px) {
            .hero h1 {
                font-size: 2rem;
            }
            
            .nav-links {
                display: none;
            }
            
            .about-content {
                grid-template-columns: 1fr;
            }
            
            .stats {
                grid-template-columns: repeat(2, 1fr);
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header>
        <div class="container">
            <nav>
                <a href="#" class="logo">üíº TechConseil Experts</a>
                <ul class="nav-links">
                    <li><a href="#accueil">Accueil</a></li>
                    <li><a href="#services">Services</a></li>
                    <li><a href="#apropos">√Ä propos</a></li>
                    <li><a href="#contact">Contact</a></li>
                </ul>
            </nav>
        </div>
    </header>

    <!-- Hero Section -->
    <section class="hero" id="accueil">
        <div class="container">
            <h1>Transformez votre entreprise avec nos solutions digitales</h1>
            <p>Nous accompagnons les PME dans leur transformation num√©rique avec des outils innovants et personnalis√©s</p>
            <a href="#contact" class="cta-button">D√©marrer votre projet</a>
        </div>
    </section>

    <!-- Services Section -->
    <section class="services" id="services">
        <div class="container">
            <h2 class="section-title">Nos Services</h2>
            <div class="services-grid">
                <div class="service-card">
                    <div class="service-icon">üöÄ</div>
                    <h3>D√©veloppement Web</h3>
                    <p>Cr√©ation de sites web modernes et performants adapt√©s √† votre activit√© et vos objectifs business.</p>
                </div>
                <div class="service-card">
                    <div class="service-icon">üìä</div>
                    <h3>Solutions CRM</h3>
                    <p>Syst√®mes de gestion client personnalis√©s pour optimiser vos relations commerciales et fid√©liser votre client√®le.</p>
                </div>
                <div class="service-card">
                    <div class="service-icon">ü§ñ</div>
                    <h3>Intelligence Artificielle</h3>
                    <p>Int√©gration d'assistants IA pour automatiser vos processus et am√©liorer l'exp√©rience utilisateur.</p>
                </div>
                <div class="service-card">
                    <div class="service-icon">‚öôÔ∏è</div>
                    <h3>Automatisation</h3>
                    <p>Optimisation de vos workflows avec des outils d'automatisation sur mesure pour gagner en productivit√©.</p>
                </div>
            </div>
        </div>
    </section>

    <!-- About Section -->
    <section class="about" id="apropos">
        <div class="container">
            <div class="about-content">
                <div class="about-text">
                    <h2>Pourquoi choisir TechConseil Experts ?</h2>
                    <p>Depuis 2018, nous accompagnons les entreprises dans leur transformation digitale. Notre √©quipe d'experts combine cr√©ativit√© et expertise technique pour livrer des solutions qui font vraiment la diff√©rence.</p>
                    <p>Nous croyons que la technologie doit servir vos objectifs business, pas les compliquer. C'est pourquoi nous privil√©gions toujours des approches simples, efficaces et √©volutives.</p>
                </div>
                <div class="stats">
                    <div class="stat">
                        <div class="stat-number">150+</div>
                        <div class="stat-label">Projets r√©alis√©s</div>
                    </div>
                    <div class="stat">
                        <div class="stat-number">98%</div>
                        <div class="stat-label">Clients satisfaits</div>
                    </div>
                    <div class="stat">
                        <div class="stat-number">5 ans</div>
                        <div class="stat-label">D'exp√©rience</div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Footer -->
    <footer id="contact">
        <div class="container">
            <div class="footer-content">
                <div class="footer-section">
                    <h3>Contact</h3>
                    <ul>
                        <li>üìß contact@techconseil-experts.fr</li>
                        <li>üìû +33 1 23 45 67 89</li>
                        <li>üìç 15 Rue de la Innovation, 75001 Paris</li>
                    </ul>
                </div>
                <div class="footer-section">
                    <h3>Services</h3>
                    <ul>
                        <li><a href="#">D√©veloppement Web</a></li>
                        <li><a href="#">Solutions CRM</a></li>
                        <li><a href="#">Intelligence Artificielle</a></li>
                        <li><a href="#">Automatisation</a></li>
                    </ul>
                </div>
                <div class="footer-section">
                    <h3>Entreprise</h3>
                    <ul>
                        <li><a href="#">√Ä propos</a></li>
                        <li><a href="#">Notre √©quipe</a></li>
                        <li><a href="#">Carri√®res</a></li>
                        <li><a href="#">Blog</a></li>
                    </ul>
                </div>
            </div>
            <div class="footer-bottom">
                <p>&copy; 2024 TechConseil Experts. Tous droits r√©serv√©s. | Site cr√©√© avec nos solutions digitales</p>
            </div>
        </div>
    </footer>

    <!-- üéØ INT√âGRATION WIDGET - La ligne que le client doit ajouter -->
    <script src="/widget-embed.js"></script>
    
</body>
</html>`;
    
    res.setHeader('Content-Type', 'text/html');
    res.send(demoClientHTML);
});

// ‚úÖ ROUTE RACINE: Page d'accueil du backend
app.get('/', (req, res) => {
    const welcomeHTML = `
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TechNova Chat Widget Backend</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: white;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(255,255,255,0.1);
            padding: 40px;
            border-radius: 20px;
            backdrop-filter: blur(10px);
            text-align: center;
        }
        .logo {
            font-size: 3rem;
            margin-bottom: 20px;
        }
        .status {
            background: rgba(0,255,0,0.2);
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
            border: 2px solid rgba(0,255,0,0.5);
        }
        .links {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }
        .link {
            background: rgba(255,255,255,0.2);
            padding: 20px;
            border-radius: 10px;
            text-decoration: none;
            color: white;
            transition: all 0.3s;
            border: 1px solid rgba(255,255,255,0.3);
        }
        .link:hover {
            background: rgba(255,255,255,0.3);
            transform: translateY(-2px);
        }
        .info {
            background: rgba(255,255,255,0.1);
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
            text-align: left;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="logo">üöÄ</div>
        <h1>TechNova Chat Widget Backend</h1>
        <h2>Serveur Op√©rationnel sur Coolify</h2>
        
        <div class="status">
            <h3>‚úÖ BACKEND ACTIF</h3>
            <p>Connect√© √† OpenWebUI : ${OPENWEBUI_URL}</p>
            <p>Timestamp : ${new Date().toISOString()}</p>
        </div>
        
        <div class="links">
            <a href="/test-data-attributes" class="link">
                <h3>üß™ Test Attributs Data-*</h3>
                <p>NOUVEAU : Testez tous les attributs data-* en action</p>
            </a>
            
            <a href="/demo-client" class="link">
                <h3>üéØ D√©mo Client Professionnelle</h3>
                <p>Site d'entreprise r√©aliste avec widget int√©gr√©</p>
            </a>
            
            <a href="/widget-chat" class="link">
                <h3>üí¨ Test Chat Widget</h3>
                <p>Page de test compl√®te avec chat fonctionnel</p>
            </a>
            
            <a href="/health" class="link">
                <h3>üîç Health Check</h3>
                <p>Statut du backend et API</p>
            </a>
            
            <a href="/widget-embed.js" class="link">
                <h3>üì¶ Widget Embed</h3>
                <p>Fichier JavaScript pour int√©gration</p>
            </a>
        </div>
        
        <div class="info">
            <h3>üìã Endpoints Disponibles :</h3>
            <ul>
                <li><strong>/</strong> - Page d'accueil (cette page)</li>
                <li><strong>/widget-chat</strong> - Interface de test du chat</li>
                <li><strong>/health</strong> - Status du backend</li>
                <li><strong>/api/chat</strong> - API s√©curis√©e pour le chat</li>
                <li><strong>/api/models</strong> - Liste des mod√®les disponibles</li>
                <li><strong>/widget-embed.js</strong> - Script d'int√©gration</li>
            </ul>
        </div>
        
        <div class="info">
            <h3>üîß Pour Int√©gration WordPress :</h3>
            <code style="background: rgba(0,0,0,0.3); padding: 10px; border-radius: 5px; display: block;">
                &lt;script src="${req.protocol}://${req.get('host')}/widget-embed.js"&gt;&lt;/script&gt;
            </code>
        </div>
    </div>
</body>
</html>`;
    
    res.setHeader('Content-Type', 'text/html');
    res.send(welcomeHTML);
});

// Endpoint de sant√©
app.get('/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        timestamp: new Date().toISOString(),
        openwebui_url: OPENWEBUI_URL,
        backend_url: `${req.protocol}://${req.get('host')}`
    });
});

// D√©marrage du serveur
app.listen(PORT, () => {
    console.log(`üöÄ Serveur TechNova backend d√©marr√© sur le port ${PORT}`);
    console.log(`üîó OpenWebUI URL: ${OPENWEBUI_URL}`);
    console.log(`üîê API Key configur√©e: ${OPENWEBUI_API_KEY ? 'Oui' : 'Non'}`);
});
