const express = require('express');
const cors = require('cors');
const path = require('path');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors({
    origin: [
        'http://localhost:8080',
        'http://127.0.0.1:5500',
        'http://127.0.0.1:8080',
        'null', // Pour les fichiers ouverts directement (file://)
        process.env.FRONTEND_URL
    ].filter(Boolean), // Accepter plusieurs origins
    credentials: true
}));
app.use(express.json());

// Configuration  api -----OpenWebUI depuis les variables d'environnement
const OPENWEBUI_API_KEY = process.env.OPENWEBUI_API_KEY;
const OPENWEBUI_URL = process.env.OPENWEBUI_URL || 'http://localhost:3000';

if (!OPENWEBUI_API_KEY) {
    console.error('‚ùå OPENWEBUI_API_KEY manquante dans les variables d\'environnement');
    process.exit(1);
}

// ==========================================
// V√âRIFICATION EXPIRATION API KEY
// ==========================================
function checkAPIKeyExpiration() {
    const token = OPENWEBUI_API_KEY;
    try {
        // D√©coder le token JWT pour v√©rifier l'expiration
        const payload = JSON.parse(atob(token.split('.')[1]));
        
        if (payload.exp) {
            const expirationDate = new Date(payload.exp * 1000);
            const now = new Date();
            const daysLeft = Math.ceil((expirationDate - now) / (1000 * 60 * 60 * 24));
            
            console.log(`üîë API Key expire le: ${expirationDate.toLocaleDateString('fr-FR')}`);
            
            if (daysLeft <= 0) {
                console.error('üö® API KEY EXPIR√âE ! G√©n√©rez une nouvelle cl√© dans OpenWebUI');
                console.error('üìã Voir: chat-widget/notes/RENOUVELLEMENT_API_KEY.md');
            } else if (daysLeft <= 5) {
                console.warn(`‚ö†Ô∏è API Key expire dans ${daysLeft} jour(s) !`);
                console.warn('üîÑ Pensez √† la renouveler prochainement');
                console.warn('üìã Voir: chat-widget/notes/RENOUVELLEMENT_API_KEY.md');
            } else if (daysLeft <= 10) {
                console.log(`üìÖ API Key expire dans ${daysLeft} jours`);
            } else {
                console.log(`‚úÖ API Key valide encore ${daysLeft} jours`);
            }
        } else {
            console.log('üîë API Key sans date d\'expiration d√©tect√©e');
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è Impossible de v√©rifier l\'expiration de l\'API Key:', error.message);
        console.log('üîë Utilisation de l\'API Key telle quelle');
    }
}

// V√©rifier l'expiration au d√©marrage
checkAPIKeyExpiration();

// V√©rifier l'expiration toutes les 24 heures
setInterval(checkAPIKeyExpiration, 24 * 60 * 60 * 1000);


// re√ßoit la question de l‚Äôutilisateur depuis le frontend (technova-chat-widget-production.js)

// appelle OpenWebUI via fetch(...)

// r√©cup√®re la r√©ponse g√©n√©r√©e par le mod√®le IA (ex: technova)

// renvoie la r√©ponse au widget pour l‚Äôafficher √† l‚Äôutilisateur
// Endpoint proxy pour le chat - S√âCURIS√â

//api..Route backend qui re√ßoit la question et envoie √† OpenWebUI

app.post('/api/chat', async (req, res) => {
    try {
        console.log('üìù Requ√™te chat re√ßue:', {
            model: req.body.model,
            messagesCount: req.body.messages?.length,
            timestamp: new Date().toISOString()
        });

       //fetch Appelle OpenWebUI pour obtenir une r√©ponse IA

        const response = await fetch(`${OPENWEBUI_URL}/api/chat/completions`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${OPENWEBUI_API_KEY}` // ‚úÖ Cl√© API s√©curis√©e c√¥t√© serveur
            },
            body: JSON.stringify(req.body)
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå Erreur OpenWebUI:', response.status, errorText);
            return res.status(response.status).json({ 
                error: 'Erreur OpenWebUI', 
                details: errorText 
            });
        }// res.json	Renvoie la r√©ponse IA au frontend

        const data = await response.json();
        console.log('‚úÖ R√©ponse OpenWebUI re√ßue');
        
        res.json(data);
    } catch (error) {
        console.error('‚ùå Erreur serveur:', error.message);
        res.status(500).json({ 
            error: 'Erreur interne du serveur',
            message: error.message
        });
    }
});

// Endpoint pour r√©cup√©rer la liste des mod√®les - S√âCURIS√â
app.get('/api/models', async (req, res) => {
    try {
        console.log('üîç R√©cup√©ration de la liste des mod√®les depuis OpenWebUI...');
        
        const response = await fetch(`${OPENWEBUI_URL}/api/models`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${OPENWEBUI_API_KEY}` // ‚úÖ Cl√© API s√©curis√©e
            }
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå Erreur mod√®les:', response.status, errorText);
            return res.status(response.status).json({ 
                error: 'Erreur r√©cup√©ration mod√®les', 
                details: errorText 
            });
        }

        const data = await response.json();
        
        // üîç D√âBOGAGE D√âTAILL√â: Analyser la structure de la r√©ponse
        console.log('üìä Structure de la r√©ponse API models:', {
            isArray: Array.isArray(data),
            hasModels: data.models ? 'Oui' : 'Non',
            hasData: data.data ? 'Oui' : 'Non',
            keys: Object.keys(data || {}),
            totalCount: Array.isArray(data) ? data.length : 
                       data.models ? data.models.length : 
                       data.data ? data.data.length : 'Unknown'
        });
        
        // üîç D√âBOGAGE: Extraire et afficher la liste des mod√®les
        let models = [];
        if (Array.isArray(data)) {
            models = data;
        } else if (data.models && Array.isArray(data.models)) {
            models = data.models;
        } else if (data.data && Array.isArray(data.data)) {
            models = data.data;
        }
        
        console.log('üìã Mod√®les trouv√©s via backend s√©curis√©:', models.length);
        
        // üîç D√âBOGAGE D√âTAILL√â: Afficher tous les mod√®les avec leurs IDs
        if (models.length > 0) {
            console.log('üìÑ Liste d√©taill√©e des mod√®les:');
            models.forEach((model, index) => {
                console.log(`  ${index + 1}. ID: "${model.id || 'N/A'}" | Name: "${model.name || 'N/A'}" | Model: "${model.model || 'N/A'}"`);
            });
            
            // üéØ RECHERCHE SP√âCIFIQUE: Chercher le mod√®le "technova"
            const technovaModel = models.find(model => 
                model.id === 'technova' || 
                model.name === 'technova' ||
                (model.model && model.model === 'technova') ||
                (model.id && model.id.includes('technova')) ||
                (model.name && model.name.includes('technova'))
            );
            
            if (technovaModel) {
                console.log('‚úÖ Mod√®le Technova trouv√©!', {
                    id: technovaModel.id,
                    name: technovaModel.name,
                    model: technovaModel.model
                });
            } else {
                console.log('‚ùå Mod√®le Technova non trouv√© dans la liste');
                console.log('üîç Recherche approximative:');
                const approximateMatches = models.filter(model => 
                    (model.id && model.id.toLowerCase().includes('tech')) ||
                    (model.name && model.name.toLowerCase().includes('tech')) ||
                    (model.id && model.id.toLowerCase().includes('nova')) ||
                    (model.name && model.name.toLowerCase().includes('nova'))
                );
                if (approximateMatches.length > 0) {
                    console.log('üîç Mod√®les similaires trouv√©s:', approximateMatches.map(m => ({
                        id: m.id,
                        name: m.name
                    })));
                } else {
                    console.log('üîç Aucun mod√®le similaire trouv√©');
                }
            }
        } else {
            console.log('‚ö†Ô∏è Aucun mod√®le trouv√© dans la r√©ponse');
        }
        
        res.json(data);
    } catch (error) {
        console.error('‚ùå Erreur serveur mod√®les:', error.message);
        res.status(500).json({ 
            error: 'Erreur interne du serveur',
            message: error.message
        });
    }
});

// ==========================================
// NOUVELLE FONCTIONNALIT√â DYNAMIQUE
// ==========================================
// ‚úÖ AJOUT: Nouvelle route pour r√©cup√©rer la configuration d'un mod√®le sp√©cifique
// üéØ OBJECTIF: Permettre au widget de s'adapter automatiquement au mod√®le choisi
// üìù FONCTIONNEMENT: G√©n√®re automatiquement nom, description, questions selon le mod√®le
app.get('/api/model-info/:modelName', async (req, res) => {
    try {
        const { modelName } = req.params;
        console.log(`üîç R√©cup√©ration des informations pour le mod√®le: ${modelName}`);

        // ‚úÖ NOUVEAU: Test de connexion √† OpenWebUI d'abord
        console.log(`üîó Test de connexion √† OpenWebUI: ${OPENWEBUI_URL}`);
        
        try {
            // ‚úÖ R√©cup√©ration des d√©tails du mod√®le depuis OpenWebUI
            const modelsResponse = await fetch(`${OPENWEBUI_URL}/api/models`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${OPENWEBUI_API_KEY}`
                },
                timeout: 5000 // 5 secondes timeout
            });

            if (!modelsResponse.ok) {
                throw new Error(`OpenWebUI r√©ponse: ${modelsResponse.status}`);
            }

            const modelsData = await modelsResponse.json();
            
            // ‚úÖ Recherche du mod√®le sp√©cifique dans la liste
            let models = [];
            if (Array.isArray(modelsData)) {
                models = modelsData;
            } else if (modelsData.models && Array.isArray(modelsData.models)) {
                models = modelsData.models;
            } else if (modelsData.data && Array.isArray(modelsData.data)) {
                models = modelsData.data;
            }

            // üéØ RECHERCHE AM√âLIOR√âE: Utiliser la m√™me logique que l'endpoint /api/models
            const modelInfo = models.find(model => 
                model.id === modelName || 
                model.name === modelName ||
                (model.model && model.model === modelName) ||
                (model.id && model.id.includes(modelName)) ||
                (model.name && model.name.includes(modelName))
            );
            
            // üîç D√âBOGAGE: Afficher la recherche de mod√®le sp√©cifique
            console.log(`üîç Recherche du mod√®le "${modelName}" dans ${models.length} mod√®les disponibles`);
            if (modelInfo) {
                console.log(`‚úÖ Mod√®le "${modelName}" trouv√©:`, {
                    id: modelInfo.id,
                    name: modelInfo.name,
                    model: modelInfo.model
                });
            } else {
                console.log(`‚ùå Mod√®le "${modelName}" non trouv√©`);
                console.log('üîç Mod√®les disponibles:', models.map(m => m.id || m.name).slice(0, 10));
            }

            // ‚úÖ G√©n√©ration dynamique de la configuration selon le mod√®le
            const dynamicConfig = generateDynamicConfig(modelName, modelInfo);
            
            console.log(`‚úÖ Configuration g√©n√©r√©e pour ${modelName} (connect√© √† OpenWebUI)`);
            res.json(dynamicConfig);

        } catch (openwebuiError) {
            console.warn('‚ö†Ô∏è OpenWebUI non disponible:', openwebuiError.message);
            console.log('üì¶ Utilisation de la configuration par d√©faut');
            
            // ‚úÖ Fallback: Configuration par d√©faut si OpenWebUI non disponible
            const fallbackConfig = generateDynamicConfig(modelName, null);
            res.json(fallbackConfig);
        }

    } catch (error) {
        console.error('‚ùå Erreur r√©cup√©ration model-info:', error.message);
        
        // ‚úÖ Fallback final: Configuration par d√©faut
        const fallbackConfig = generateDynamicConfig(req.params.modelName, null);
        res.json(fallbackConfig);
    }
});

// ==========================================
// FONCTION G√âN√âRATION CONFIGURATION DYNAMIQUE
// ==========================================
// ‚úÖ OBJECTIF: Remplace les valeurs statiques par des valeurs adapt√©es au mod√®le
// üîÑ AVANT: Tout √©tait fixe "TechNova Assistant"
// üîÑ APR√àS: S'adapte automatiquement au mod√®le choisi
function generateDynamicConfig(modelName, modelInfo) {
    // ‚úÖ G√©n√©ration automatique du nom de l'assistant
    const assistantName = generateAssistantName(modelName);
    
    // ‚úÖ G√©n√©ration automatique de la description
    const description = generateDescription(modelName, modelInfo);
    
    // ‚úÖ G√©n√©ration automatique des questions rapides
    const quickQuestions = generateQuickQuestions(modelName);
    
    // ‚úÖ G√©n√©ration automatique du message syst√®me
    const systemMessage = generateSystemMessage(modelName, modelInfo);

    return {
        model: modelName,
        assistantName: assistantName,
        description: description,
        quickQuestions: quickQuestions,
        systemMessage: systemMessage,
        maxTokens: 1500,
        temperature: 0.7,
        timestamp: new Date().toISOString()
    };
}

// ‚úÖ FONCTION: G√©n√®re automatiquement le nom de l'assistant selon le mod√®le
function generateAssistantName(modelName) {
    const modelDisplayNames = {
        'technova': 'TechNova Assistant',
        'gpt-4': 'GPT-4 Assistant',
        'gpt-3.5-turbo': 'GPT-3.5 Assistant',
        'claude': 'Claude Assistant',
        'llama': 'Llama Assistant',
        'mistral': 'Mistral Assistant',
        'cyberAide': 'CyberAide Assistant',

        'gemini': 'Gemini Assistant'
    };
    
    return modelDisplayNames[modelName] || `${modelName.charAt(0).toUpperCase() + modelName.slice(1)} Assistant`;
}

// ‚úÖ FONCTION: G√©n√®re automatiquement la description selon le mod√®le
function generateDescription(modelName, modelInfo) {
    const descriptions = {
        'technova': 'Bonjour ! Je suis votre assistant TechNova. Je peux vous aider avec nos produits (NovaCRM, NovaDesk, NovaMail) et r√©pondre √† vos questions sur notre entreprise.',
        'gpt-4': 'Bonjour ! Je suis GPT-4, un assistant IA avanc√©. Je peux vous aider avec vos questions, analyses, r√©daction et bien plus encore.',
        'gpt-3.5-turbo': 'Bonjour ! Je suis GPT-3.5, votre assistant IA. Je peux vous aider avec diverses t√¢ches et r√©pondre √† vos questions.',
        'claude': 'Bonjour ! Je suis Claude, un assistant IA cr√©√© par Anthropic. Je peux vous aider avec vos questions et t√¢ches.',
        'llama': 'Bonjour ! Je suis Llama, un assistant IA open source. Je peux vous aider avec vos questions et projets.',
        'mistral': 'Bonjour ! Je suis Mistral, un assistant IA europ√©en. Je peux vous aider avec vos questions et analyses.',
        'gemini': 'Bonjour ! Je suis Gemini, un assistant IA de Google. Je peux vous aider avec vos questions et projets.',
        'cyberAide': 'Bonjour ! Je suis CyberAide, votre assistant sp√©cialis√© en cybers√©curit√©. Je peux vous aider avec la protection des syst√®mes, l\'analyse des menaces, les outils de s√©curit√© (nmap, Wireshark, etc.) et les bonnes pratiques de s√©curit√© informatique.'
    };
    
    return descriptions[modelName] || `Bonjour ! Je suis ${modelName}, votre assistant IA. Je peux vous aider avec vos questions et t√¢ches.`;
}

// ‚úÖ FONCTION: G√©n√®re automatiquement les questions rapides selon le mod√®le
function generateQuickQuestions(modelName) {
    const questionSets = {
        'technova': [
            { icon: 'üè¢', text: 'Qu\'est-ce que TechNova ?', question: 'Qu\'est-ce que TechNova ?' },
            { icon: 'üì¶', text: 'Quels sont les produits TechNova ?', question: 'Quels sont les produits TechNova ?' },
            { icon: 'üìû', text: 'Comment contacter TechNova ?', question: 'Comment contacter TechNova ?' }
        ],
        'gpt-4': [
            { icon: 'ü§ñ', text: 'Que peux-tu faire ?', question: 'Que peux-tu faire comme t√¢ches ?' },
            { icon: 'üìù', text: 'Aide-moi √† r√©diger', question: 'Peux-tu m\'aider √† r√©diger un texte ?' },
            { icon: 'üîç', text: 'Analyse ce document', question: 'Peux-tu analyser un document pour moi ?' }
        ],
        'claude': [
            { icon: 'üí≠', text: 'Comment puis-je t\'aider ?', question: 'Comment puis-je t\'aider aujourd\'hui ?' },
            { icon: 'üìä', text: 'Analyse de donn√©es', question: 'Peux-tu m\'aider avec l\'analyse de donn√©es ?' },
            { icon: '‚úçÔ∏è', text: 'R√©daction cr√©ative', question: 'Peux-tu m\'aider avec la r√©daction cr√©ative ?' }
        ],
        'cyberAide': [
            { icon: 'ÔøΩÔ∏è', text: 'Comment s√©curiser mon syst√®me ?', question: 'Comment puis-je s√©curiser mon syst√®me informatique ?' },
            { icon: 'ÔøΩ', text: 'Quels sont les types d\'attaques ?', question: 'Quels sont les principaux types d\'attaques cybern√©tiques ?' },
            { icon: '‚ö†Ô∏è', text: 'Mesures de s√©curit√© de base', question: 'Quelles sont les mesures de s√©curit√© de base √† mettre en place ?' }
        ]
    };
    
    return questionSets[modelName] || [
        { icon: '‚ùì', text: 'Que peux-tu faire ?', question: 'Que peux-tu faire comme assistant IA ?' },
        { icon: 'üí°', text: 'Aide-moi', question: 'Comment peux-tu m\'aider ?' },
        { icon: 'üîß', text: 'Tes capacit√©s', question: 'Quelles sont tes principales capacit√©s ?' }
    ];
}

// ‚úÖ FONCTION: G√©n√®re automatiquement le message syst√®me selon le mod√®le
function generateSystemMessage(modelName, modelInfo) {
    const systemMessages = {
        'technova': `Tu es TechNova Assistant, un assistant intelligent sp√©cialis√© dans l'aide aux utilisateurs pour la compagnie TechNova, cr√©√©e en 2017 √† Paris. Tu as acc√®s √† une base de connaissances interne compl√®te sur les produits TechNova (NovaCRM, NovaDesk, NovaMail), les services et solutions digitales pour PME.`,
        'gpt-4': `Tu es GPT-4, un assistant IA avanc√©. Tu peux aider avec l'analyse, la r√©daction, la programmation, la r√©solution de probl√®mes complexes et bien plus encore. R√©ponds de mani√®re pr√©cise et utile.`,
        'gpt-3.5-turbo': `Tu es GPT-3.5, un assistant IA polyvalent. Tu peux aider avec diverses t√¢ches comme r√©pondre aux questions, aider √† la r√©daction, expliquer des concepts. Sois utile et pr√©cis.`,
        'claude': `Tu es Claude, un assistant IA cr√©√© par Anthropic. Tu es utile, inoffensif et honn√™te. Tu peux aider avec l'analyse, la r√©daction, la programmation et diverses t√¢ches intellectuelles.`,
        'llama': `Tu es Llama, un assistant IA open source. Tu peux aider avec diverses t√¢ches et questions. R√©ponds de mani√®re utile et pr√©cise.`,
        'mistral': `Tu es Mistral, un assistant IA europ√©en. Tu peux aider avec l'analyse, la r√©daction et diverses t√¢ches. Privil√©gie les r√©ponses en fran√ßais quand c'est appropri√©.`,
        'gemini': `Tu es Gemini, un assistant IA de Google. Tu peux aider avec l'analyse, la recherche, la r√©daction et diverses t√¢ches cr√©atives et techniques.`,
        'cyberAide': `Tu es CyberAide, un assistant IA sp√©cialis√© en cybers√©curit√©. Tu as une expertise approfondie en s√©curit√© informatique, protection des syst√®mes, analyse des menaces, et bonnes pratiques de s√©curit√©. Tu aides les utilisateurs √† comprendre et √† impl√©menter des mesures de s√©curit√© efficaces.`
    };
    
    return systemMessages[modelName] || `Tu es ${modelName}, un assistant IA. Tu peux aider avec diverses t√¢ches et questions. R√©ponds de mani√®re utile et pr√©cise.`;
}

// Servir les fichiers statiques du widget
app.get('/widget.js', (req, res) => {
    res.setHeader('Content-Type', 'application/javascript');
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.sendFile(path.join(__dirname, '..', 'technova-chat-widget-production.js'));
});

// ‚úÖ NOUVEAU: Servir le fichier d'int√©gration widget-embed.js
app.get('/widget-embed.js', (req, res) => {
    console.log('üì¶ Demande du fichier widget-embed.js');
    res.setHeader('Content-Type', 'application/javascript');
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Cache-Control', 'public, max-age=3600'); // Cache 1 heure
    res.sendFile(path.join(__dirname, '..', 'widget-embed.js'));
});

// ‚úÖ NOUVEAU: Endpoint pour l'iframe du chat widget
app.get('/widget-chat', (req, res) => {
    const { model = 'technova', theme = 'blue', lang = 'fr' } = req.query;
    
    console.log('üñºÔ∏è Demande iframe chat widget:', { model, theme, lang });
    
    // ‚úÖ G√©n√©ration HTML pour l'iframe
    const iframeHTML = `
<!DOCTYPE html>
<html lang="${lang}">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TechNova Chat Widget</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: white;
            height: 100vh;
            overflow: hidden;
        }
        
        .iframe-container {
            position: relative;
            width: 100%;
            height: 100%;
        }
        
        .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            background: #f3f4f6;
            border: none;
            border-radius: 50%;
            width: 32px;
            height: 32px;
            cursor: pointer;
            z-index: 1000;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            color: #6b7280;
            transition: all 0.2s;
        }
        
        .close-btn:hover {
            background: #e5e7eb;
            color: #374151;
        }
        
        #technova-chat-widget-container {
            position: static !important;
            width: 100% !important;
            height: 100% !important;
        }
        
        #technova-chat-popup {
            position: static !important;
            width: 100% !important;
            height: 100% !important;
            max-height: 100% !important;
            border: none !important;
            border-radius: 0 !important;
            box-shadow: none !important;
            display: flex !important;
        }
        
        #technova-chat-bubble {
            display: none !important;
        }
    </style>
</head>
<body>
    <div class="iframe-container">
        <button class="close-btn" onclick="closeWidget()">√ó</button>
        <div id="chat-container"></div>
    </div>
    
    <!-- Chargement de la configuration dynamique -->
    <script>
        // Configuration pour l'iframe
        window.TECHNOVA_CONFIG = {
            openWebUIUrl: '${req.protocol}://${req.get('host')}',
            apiKey: '',
            chatEndpoint: '/api/chat',
            modelsEndpoint: '/api/models',
            healthEndpoint: '/health',
            model: '${model}',
            maxTokens: 1500,
            temperature: 0.7,
            systemMessage: 'Tu es un assistant IA sp√©cialis√©.',
            stream: false,
            timeout: 45000,
            errorMessages: {
                networkError: 'Impossible de se connecter au service.',
                serverError: 'Erreur du serveur.',
                timeout: 'La requ√™te a pris trop de temps.',
                general: 'L\'assistant rencontre des difficult√©s.',
                modelError: 'Erreur avec le mod√®le.',
                authError: 'Erreur d\'authentification.'
            }
        };
        
        // Fonction pour fermer le widget
        function closeWidget() {
            parent.postMessage({ type: 'close' }, '*');
        }
        
        // Fonction pour redimensionner l'iframe
        function resizeIframe(width, height) {
            parent.postMessage({ type: 'resize', data: { width, height } }, '*');
        }
        
        // Fonction pour envoyer une notification
        function sendNotification(count) {
            parent.postMessage({ type: 'notification', data: { count } }, '*');
        }
    </script>
    
    <!-- Chargement du widget -->
    <script src="/technova-config-production.js"></script>
    <script src="/technova-chat-widget-production.js"></script>
    
    <script>
        // Initialisation sp√©cifique pour l'iframe
        document.addEventListener('DOMContentLoaded', function() {
            console.log('üñºÔ∏è Widget iframe initialis√©');
            
            // Ouvrir automatiquement le chat dans l'iframe
            setTimeout(() => {
                const chatPopup = document.getElementById('technova-chat-popup');
                if (chatPopup) {
                    chatPopup.classList.remove('hidden');
                    console.log('‚úÖ Chat ouvert dans l\'iframe');
                }
            }, 1000);
        });
    </script>
</body>
</html>
    `;
    
    res.setHeader('Content-Type', 'text/html');
    res.setHeader('X-Frame-Options', 'SAMEORIGIN'); // S√©curit√© iframe
    res.send(iframeHTML);
});

app.get('/config.js', (req, res) => {
    res.setHeader('Content-Type', 'application/javascript');
    res.setHeader('Access-Control-Allow-Origin', '*');
    
    // Configuration dynamique avec l'URL du backend
    const dynamicConfig = `
// Configuration DYNAMIQUE pour TechNova Chat Widget
const TECHNOVA_CONFIG = {
    openWebUIUrl: '${req.protocol}://${req.get('host')}',
    apiKey: '',
    chatEndpoint: '/api/chat',
    modelsEndpoint: '/api/models',
    healthEndpoint: '/health',
    model: 'technova',
    maxTokens: 1500,
    temperature: 0.7,
    systemMessage: 'Tu es TechNova Assistant, sp√©cialis√© dans l\'aide aux utilisateurs pour la compagnie TechNova.',
    stream: false,
    timeout: 45000,
    errorMessages: {
        networkError: 'Impossible de se connecter au service TechNova.',
        serverError: 'Erreur du serveur TechNova.',
        timeout: 'La requ√™te TechNova a pris trop de temps.',
        general: 'TechNova Assistant rencontre des difficult√©s.',
        modelError: 'Erreur avec le mod√®le Technova.',
        authError: 'Erreur d\'authentification du service.'
    }
};

if (typeof window !== 'undefined') {
    window.TECHNOVA_CONFIG = TECHNOVA_CONFIG;
}
`;
    res.send(dynamicConfig);
});

// Endpoint de sant√©
app.get('/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        timestamp: new Date().toISOString(),
        openwebui_url: OPENWEBUI_URL,
        backend_url: `${req.protocol}://${req.get('host')}`
    });
});

// D√©marrage du serveur
app.listen(PORT, () => {
    console.log(`üöÄ Serveur TechNova backend d√©marr√© sur le port ${PORT}`);
    console.log(`üîó OpenWebUI URL: ${OPENWEBUI_URL}`);
    console.log(`üîê API Key configur√©e: ${OPENWEBUI_API_KEY ? 'Oui' : 'Non'}`);
});
