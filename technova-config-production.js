// Configuration S√âCURIS√âE pour TechNova Chat Widget (PRODUCTION)
// ‚úÖ AUCUNE cl√© API expos√©e c√¥t√© frontend !

const TECHNOVA_CONFIG = {
  // URL de VOTRE backend (pas OpenWebUI directement)
  openWebUIUrl: 'http://localhost:3001', // ‚úÖ Pour test local (changez pour production)
  
  // ‚úÖ AUCUNE cl√© API c√¥t√© frontend - S√âCURIS√â !
  apiKey: '', 
  
  // Endpoints de votre backend s√©curis√©
  chatEndpoint: '/api/chat',           // ‚úÖ Endpoint pour le chat
  modelsEndpoint: '/api/models',       // ‚úÖ Endpoint pour les mod√®les
  healthEndpoint: '/health',           // ‚úÖ Endpoint de sant√©
  // parametre model token model
  // msg ER per
  // Configuration du mod√®le

  model: 'technova',
  maxTokens: 1500,
  temperature: 0.7,
  

  // Message syst√®me personnalis√© pour TechNova
  systemMessage: `Tu es TechNova Assistant, un assistant intelligent sp√©cialis√© dans l'aide aux utilisateurs pour la compagnie TechNova, cr√©√©e en 2017 √† Paris. 

Tu as acc√®s √† une base de connaissances interne compl√®te sur :
- Les produits TechNova (NovaCRM, NovaDesk, NovaMail)
- Les services et solutions digitales pour PME
- Les proc√©dures internes et FAQ
- Les valeurs et objectifs de l'entreprise

INSTRUCTIONS IMPORTANTES :
1. Base toujours tes r√©ponses sur la base de connaissances fournie
2. R√©ponds de mani√®re pr√©cise et coh√©rente
3. Aide avec l'onboarding des nouveaux employ√©s
4. Fournis des informations m√©tier sur les produits Nova
5. Repr√©sente fid√®lement la culture et les objectifs de TechNova
6. Si une question d√©passe tes connaissances, indique poliment que tu n'as pas assez d'informations

Tu es id√©al pour les clients, employ√©s, ou toute personne cherchant √† comprendre rapidement l'univers TechNova.`,
  
  // Param√®tres sp√©cifiques pour TechNova
  stream: false,
  timeout: 45000,
  
  // Messages d'erreur personnalis√©s TechNova - S√âCURIS√âS
  errorMessages: {
    networkError: 'Impossible de se connecter au service TechNova. V√©rifiez votre connexion.',
    serverError: 'Erreur du serveur TechNova. Veuillez r√©essayer plus tard.',
    timeout: 'La requ√™te TechNova a pris trop de temps. Veuillez r√©essayer.',
    general: 'TechNova Assistant rencontre des difficult√©s techniques. Veuillez r√©essayer.',
    modelError: 'Erreur avec le mod√®le Technova. Veuillez contacter le support.',
    authError: 'Erreur d\'authentification du service. Veuillez contacter l\'administrateur.'
  },
  
  // Questions pr√©d√©finies sp√©cifiques √† TechNova
  predefinedQuestions: [
    {
      question: "Qu'est-ce que TechNova ?",
      answer: "TechNova est une entreprise cr√©√©e en 2017 √† Paris, sp√©cialis√©e dans les solutions digitales pour PME. Nous proposons une suite de produits incluant NovaCRM, NovaDesk et NovaMail pour optimiser la gestion d'entreprise."
    },
    {
      question: "Quels sont les produits TechNova ?",
      answer: "TechNova propose trois produits principaux : NovaCRM (gestion de la relation client), NovaDesk (service client et ticketing), et NovaMail (solution de messagerie professionnelle)."
    },
    {
      question: "Comment contacter TechNova ?",
      answer: "Vous pouvez nous contacter via notre site web, par email √† support@technova.com, ou par t√©l√©phone. Notre √©quipe support est disponible pour vous accompagner."
    },
    {
      question: "O√π est situ√©e TechNova ?",
      answer: "TechNova a √©t√© cr√©√©e en 2017 et est bas√©e √† Paris, France. Nous servons des clients dans toute l'Europe avec nos solutions digitales."
    }
  ]
};

// Fonction pour valider la configuration Technova S√âCURIS√âE
function validateTechnovaConfig() {
  const requiredFields = ['openWebUIUrl', 'model', 'chatEndpoint'];
  const missingFields = requiredFields.filter(field => !TECHNOVA_CONFIG[field]);
  
  if (missingFields.length > 0) {
    console.error('Configuration Technova incompl√®te. Champs manquants:', missingFields);
    return false;
  }
  
  // ‚úÖ V√©rifier qu'aucune cl√© API n'est expos√©e
  if (TECHNOVA_CONFIG.apiKey && TECHNOVA_CONFIG.apiKey.length > 0) {
    console.warn('‚ö†Ô∏è ATTENTION: Une cl√© API est d√©finie c√¥t√© frontend - NON S√âCURIS√â !');
  }
  
  return true;
}

// Fonction pour tester la connexion avec le backend S√âCURIS√â
async function testTechnovaConnection() {
  try {
    console.log('üß™ Test de connexion au backend s√©curis√©...');
    
    // Tester l'endpoint de sant√© du backend
    const healthResponse = await fetch(`${TECHNOVA_CONFIG.openWebUIUrl}${TECHNOVA_CONFIG.healthEndpoint}`);
    
    if (healthResponse.ok) {
      const healthData = await healthResponse.json();
      console.log('‚úÖ Backend accessible:', healthData);
    } else {
      console.warn('‚ö†Ô∏è Backend endpoint sant√© non disponible');
    }
    
    // Tester l'endpoint des mod√®les via le backend s√©curis√©
    const modelsResponse = await fetch(`${TECHNOVA_CONFIG.openWebUIUrl}${TECHNOVA_CONFIG.modelsEndpoint}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
        // ‚úÖ AUCUNE cl√© API c√¥t√© frontend !
      }
    });
    
    console.log('üìä Statut test mod√®les:', modelsResponse.status);
    
    if (modelsResponse.ok) {
      const data = await modelsResponse.json();
      console.log('üìã R√©ponse mod√®les via backend s√©curis√©');
      
      // V√©rifier si la r√©ponse est un tableau
      let models = [];
      if (Array.isArray(data)) {
        models = data;
      } else if (data.models && Array.isArray(data.models)) {
        models = data.models;
      } else if (data.data && Array.isArray(data.data)) {
        models = data.data;
      }
      
      console.log('üîç Mod√®les trouv√©s:', models.length);
      
      // Chercher le mod√®le technova
      const technovaModel = models.find(model => 
        model.id === TECHNOVA_CONFIG.model || 
        model.name === TECHNOVA_CONFIG.model ||
        (model.model && model.model === TECHNOVA_CONFIG.model)
      );
      
      if (technovaModel) {
        console.log('‚úÖ Mod√®le Technova trouv√© via backend s√©curis√©:', technovaModel);
        return true;
      } else {
        console.log('‚ùå Mod√®le Technova non trouv√©');
        return false;
      }
    } else {
      const errorText = await modelsResponse.text();
      console.error('‚ùå Erreur test connexion backend:', modelsResponse.status, errorText);
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erreur test connexion:', error);
    return false;
  }
}

// Export pour utilisation dans d'autres fichiers
if (typeof module !== 'undefined' && module.exports) {
  module.exports = { TECHNOVA_CONFIG, validateTechnovaConfig, testTechnovaConnection };
}

// D√©finir la variable globale pour le navigateur - S√âCURIS√âE
if (typeof window !== 'undefined') {
  window.TECHNOVA_CONFIG = TECHNOVA_CONFIG;
  console.log('‚úÖ Configuration TechNova S√âCURIS√âE charg√©e (sans cl√© API expos√©e)');
}
